{"ast":null,"code":"import { takeLatest, call, put } from \"redux-saga/effects\";\nimport axios from \"axios\"; // watcher saga: watches for actions dispatched to the store, starts worker saga\n\nexport function* watcherSaga() {\n  yield takeLatest(\"todos/fetchTodos\", all);\n  yield takeLatest(\"todos/fetchTodos\", newTodo);\n} // function that makes the api request and returns a Promise for response\n\nfunction fetchTodos() {\n  return axios({\n    method: \"get\",\n    url: \"http://localhost:8080/todos\"\n  });\n}\n\nfunction addTodo() {\n  return axios({\n    method: \"post\",\n    url: \"http://localhost:8080/todos\"\n  });\n} // worker saga: makes the api call when watcher saga sees the action\n\n\nfunction* all() {\n  try {\n    const response = yield call(fetchTodos);\n    const todos = response.data; // dispatch a success action to the store with the new todo\n\n    yield put({\n      type: \"todos/getTodos\",\n      payload: {\n        todos\n      }\n    });\n  } catch (error) {\n    console.log(error); // dispatch a failure action to the store with the error\n\n    yield put({\n      type: \"todos/error\",\n      error\n    });\n  }\n}\n\nfunction* newTodo() {\n  try {\n    const response = yield call(fetchTodos);\n    const todos = response.data; // dispatch a success action to the store with the new todo\n\n    yield put({\n      type: \"todos/getTodos\",\n      payload: {\n        todos\n      }\n    });\n  } catch (error) {\n    console.log(error); // dispatch a failure action to the store with the error\n\n    yield put({\n      type: \"todos/error\",\n      error\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/ayad/Desktop/NW/todo-app/react-front/src/sagas.tsx"],"names":["takeLatest","call","put","axios","watcherSaga","all","newTodo","fetchTodos","method","url","addTodo","response","todos","data","type","payload","error","console","log"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,UAAUC,WAAV,GAAwB;AAC7B,QAAMJ,UAAU,CAAC,kBAAD,EAAqBK,GAArB,CAAhB;AACA,QAAML,UAAU,CAAC,kBAAD,EAAqBM,OAArB,CAAhB;AACD,C,CAED;;AACA,SAASC,UAAT,GAAsB;AACpB,SAAOJ,KAAK,CAAC;AACXK,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,GAAG,EAAE;AAFM,GAAD,CAAZ;AAID;;AAED,SAASC,OAAT,GAAmB;AACjB,SAAOP,KAAK,CAAC;AACXK,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,GAAG,EAAE;AAFM,GAAD,CAAZ;AAID,C,CAED;;;AACA,UAAUJ,GAAV,GAAgB;AACd,MAAI;AACF,UAAMM,QAAQ,GAAG,MAAMV,IAAI,CAACM,UAAD,CAA3B;AACA,UAAMK,KAAK,GAAGD,QAAQ,CAACE,IAAvB,CAFE,CAGF;;AACA,UAAMX,GAAG,CAAC;AAAEY,MAAAA,IAAI,EAAE,gBAAR;AAA0BC,MAAAA,OAAO,EAAE;AAAEH,QAAAA;AAAF;AAAnC,KAAD,CAAT;AACD,GALD,CAKE,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EADc,CAEd;;AACA,UAAMd,GAAG,CAAC;AAAEY,MAAAA,IAAI,EAAE,aAAR;AAAuBE,MAAAA;AAAvB,KAAD,CAAT;AACD;AACF;;AAED,UAAUV,OAAV,GAAoB;AAClB,MAAI;AACF,UAAMK,QAAQ,GAAG,MAAMV,IAAI,CAACM,UAAD,CAA3B;AACA,UAAMK,KAAK,GAAGD,QAAQ,CAACE,IAAvB,CAFE,CAGF;;AACA,UAAMX,GAAG,CAAC;AAAEY,MAAAA,IAAI,EAAE,gBAAR;AAA0BC,MAAAA,OAAO,EAAE;AAAEH,QAAAA;AAAF;AAAnC,KAAD,CAAT;AACD,GALD,CAKE,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EADc,CAEd;;AACA,UAAMd,GAAG,CAAC;AAAEY,MAAAA,IAAI,EAAE,aAAR;AAAuBE,MAAAA;AAAvB,KAAD,CAAT;AACD;AACF","sourcesContent":["import { takeLatest, call, put } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\n// watcher saga: watches for actions dispatched to the store, starts worker saga\r\nexport function* watcherSaga() {\r\n  yield takeLatest(\"todos/fetchTodos\", all);\r\n  yield takeLatest(\"todos/fetchTodos\", newTodo);\r\n}\r\n\r\n// function that makes the api request and returns a Promise for response\r\nfunction fetchTodos() {\r\n  return axios({\r\n    method: \"get\",\r\n    url: \"http://localhost:8080/todos\",\r\n  });\r\n}\r\n\r\nfunction addTodo() {\r\n  return axios({\r\n    method: \"post\",\r\n    url: \"http://localhost:8080/todos\",\r\n  });\r\n}\r\n\r\n// worker saga: makes the api call when watcher saga sees the action\r\nfunction* all() {\r\n  try {\r\n    const response = yield call(fetchTodos);\r\n    const todos = response.data;\r\n    // dispatch a success action to the store with the new todo\r\n    yield put({ type: \"todos/getTodos\", payload: { todos } });\r\n  } catch (error) {\r\n    console.log(error);\r\n    // dispatch a failure action to the store with the error\r\n    yield put({ type: \"todos/error\", error });\r\n  }\r\n}\r\n\r\nfunction* newTodo() {\r\n  try {\r\n    const response = yield call(fetchTodos);\r\n    const todos = response.data;\r\n    // dispatch a success action to the store with the new todo\r\n    yield put({ type: \"todos/getTodos\", payload: { todos } });\r\n  } catch (error) {\r\n    console.log(error);\r\n    // dispatch a failure action to the store with the error\r\n    yield put({ type: \"todos/error\", error });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}